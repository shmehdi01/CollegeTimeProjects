/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Conversion;
import Stack.Stack;


/**
 *
 * @author rizwan
 */
public class EvaluatePostfix extends javax.swing.JFrame {

    /**
     * Creates new form InfixToPrefix
     */
    public EvaluatePostfix() {
        initComponents();
    }
    
    public void EvaluateExp(String exp)
    {
        //char Opr[] = {'+' , '-', '*' , '/' };
        char check ;
        int res = 0;
        int digit;
        Stack st = new Stack(exp.length());
        int i, j;
        for(i=0 ; i<exp.length(); i++)
        {
            check = exp.charAt(i);
           //System.out.println(check);
           digit = Character.getNumericValue(check);
           //System.out.println(digit);
            if(Character.isDigit(check))
            {
                //System.out.println("push"); 
                st.Push(Integer.toString(digit));
                //System.out.println(st.Peek());
            } 
            else
            {
               //System.out.println("pop");
               int a = Integer.parseInt(st.Pop());
               int b = Integer.parseInt(st.Pop());
               if(check == '+')
               {
                  res = a + b; 
                  st.Push(Integer.toString(res));
               }
               if(check == '*')
               {
                 res = a * b; 
                 st.Push(Integer.toString(res));  
               }
               if(check == '/')
               {
                 res = a / b; 
                 st.Push(Integer.toString(res));  
               }
               if(check == '-')
               {
                 res = a * b; 
                 st.Push(Integer.toString(res));  
               }
            }    
        }
        get.setText(""+ res);
    }
   
   
    
    public boolean iSOperator(char op)
    {
        switch(op)
        {
            case '+' :
                return true;
            case '/' :
                return true;
            case '*' :
                return true;
            case '-' :
                return true; 
            case '^' :
                return true;
            default : return false;
             
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        display = new javax.swing.JTextField();
        get = new javax.swing.JLabel();
        btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn.setText("get");
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(get, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(btn)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(get, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(btn)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        
        EvaluateExp(display.getText());
        
    }//GEN-LAST:event_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
           
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EvaluatePostfix().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JTextField display;
    private javax.swing.JLabel get;
    // End of variables declaration//GEN-END:variables
}
